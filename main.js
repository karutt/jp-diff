/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DiffHighlighterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/diffExecutor.ts
var import_obsidian = require("obsidian");

// src/diffHighlighter.ts
var import_state2 = require("@codemirror/state");
var import_view2 = require("@codemirror/view");

// node_modules/.pnpm/diff@7.0.0/node_modules/diff/lib/index.mjs
function Diff() {
}
Diff.prototype = {
  diff: function diff(oldString, newString) {
    var _options$timeout;
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var callback = options.callback;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    var self = this;
    function done(value) {
      value = self.postProcess(value, options);
      if (callback) {
        setTimeout(function() {
          callback(value);
        }, 0);
        return true;
      } else {
        return value;
      }
    }
    oldString = this.castInput(oldString, options);
    newString = this.castInput(newString, options);
    oldString = this.removeEmpty(this.tokenize(oldString, options));
    newString = this.removeEmpty(this.tokenize(newString, options));
    var newLen = newString.length, oldLen = oldString.length;
    var editLength = 1;
    var maxEditLength = newLen + oldLen;
    if (options.maxEditLength != null) {
      maxEditLength = Math.min(maxEditLength, options.maxEditLength);
    }
    var maxExecutionTime = (_options$timeout = options.timeout) !== null && _options$timeout !== void 0 ? _options$timeout : Infinity;
    var abortAfterTimestamp = Date.now() + maxExecutionTime;
    var bestPath = [{
      oldPos: -1,
      lastComponent: void 0
    }];
    var newPos = this.extractCommon(bestPath[0], newString, oldString, 0, options);
    if (bestPath[0].oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
      return done(buildValues(self, bestPath[0].lastComponent, newString, oldString, self.useLongestToken));
    }
    var minDiagonalToConsider = -Infinity, maxDiagonalToConsider = Infinity;
    function execEditLength() {
      for (var diagonalPath = Math.max(minDiagonalToConsider, -editLength); diagonalPath <= Math.min(maxDiagonalToConsider, editLength); diagonalPath += 2) {
        var basePath = void 0;
        var removePath = bestPath[diagonalPath - 1], addPath = bestPath[diagonalPath + 1];
        if (removePath) {
          bestPath[diagonalPath - 1] = void 0;
        }
        var canAdd = false;
        if (addPath) {
          var addPathNewPos = addPath.oldPos - diagonalPath;
          canAdd = addPath && 0 <= addPathNewPos && addPathNewPos < newLen;
        }
        var canRemove = removePath && removePath.oldPos + 1 < oldLen;
        if (!canAdd && !canRemove) {
          bestPath[diagonalPath] = void 0;
          continue;
        }
        if (!canRemove || canAdd && removePath.oldPos < addPath.oldPos) {
          basePath = self.addToPath(addPath, true, false, 0, options);
        } else {
          basePath = self.addToPath(removePath, false, true, 1, options);
        }
        newPos = self.extractCommon(basePath, newString, oldString, diagonalPath, options);
        if (basePath.oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
          return done(buildValues(self, basePath.lastComponent, newString, oldString, self.useLongestToken));
        } else {
          bestPath[diagonalPath] = basePath;
          if (basePath.oldPos + 1 >= oldLen) {
            maxDiagonalToConsider = Math.min(maxDiagonalToConsider, diagonalPath - 1);
          }
          if (newPos + 1 >= newLen) {
            minDiagonalToConsider = Math.max(minDiagonalToConsider, diagonalPath + 1);
          }
        }
      }
      editLength++;
    }
    if (callback) {
      (function exec() {
        setTimeout(function() {
          if (editLength > maxEditLength || Date.now() > abortAfterTimestamp) {
            return callback();
          }
          if (!execEditLength()) {
            exec();
          }
        }, 0);
      })();
    } else {
      while (editLength <= maxEditLength && Date.now() <= abortAfterTimestamp) {
        var ret = execEditLength();
        if (ret) {
          return ret;
        }
      }
    }
  },
  addToPath: function addToPath(path, added, removed, oldPosInc, options) {
    var last = path.lastComponent;
    if (last && !options.oneChangePerToken && last.added === added && last.removed === removed) {
      return {
        oldPos: path.oldPos + oldPosInc,
        lastComponent: {
          count: last.count + 1,
          added,
          removed,
          previousComponent: last.previousComponent
        }
      };
    } else {
      return {
        oldPos: path.oldPos + oldPosInc,
        lastComponent: {
          count: 1,
          added,
          removed,
          previousComponent: last
        }
      };
    }
  },
  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath, options) {
    var newLen = newString.length, oldLen = oldString.length, oldPos = basePath.oldPos, newPos = oldPos - diagonalPath, commonCount = 0;
    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(oldString[oldPos + 1], newString[newPos + 1], options)) {
      newPos++;
      oldPos++;
      commonCount++;
      if (options.oneChangePerToken) {
        basePath.lastComponent = {
          count: 1,
          previousComponent: basePath.lastComponent,
          added: false,
          removed: false
        };
      }
    }
    if (commonCount && !options.oneChangePerToken) {
      basePath.lastComponent = {
        count: commonCount,
        previousComponent: basePath.lastComponent,
        added: false,
        removed: false
      };
    }
    basePath.oldPos = oldPos;
    return newPos;
  },
  equals: function equals(left, right, options) {
    if (options.comparator) {
      return options.comparator(left, right);
    } else {
      return left === right || options.ignoreCase && left.toLowerCase() === right.toLowerCase();
    }
  },
  removeEmpty: function removeEmpty(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      if (array[i]) {
        ret.push(array[i]);
      }
    }
    return ret;
  },
  castInput: function castInput(value) {
    return value;
  },
  tokenize: function tokenize(value) {
    return Array.from(value);
  },
  join: function join(chars) {
    return chars.join("");
  },
  postProcess: function postProcess(changeObjects) {
    return changeObjects;
  }
};
function buildValues(diff2, lastComponent, newString, oldString, useLongestToken) {
  var components = [];
  var nextComponent;
  while (lastComponent) {
    components.push(lastComponent);
    nextComponent = lastComponent.previousComponent;
    delete lastComponent.previousComponent;
    lastComponent = nextComponent;
  }
  components.reverse();
  var componentPos = 0, componentLen = components.length, newPos = 0, oldPos = 0;
  for (; componentPos < componentLen; componentPos++) {
    var component = components[componentPos];
    if (!component.removed) {
      if (!component.added && useLongestToken) {
        var value = newString.slice(newPos, newPos + component.count);
        value = value.map(function(value2, i) {
          var oldValue = oldString[oldPos + i];
          return oldValue.length > value2.length ? oldValue : value2;
        });
        component.value = diff2.join(value);
      } else {
        component.value = diff2.join(newString.slice(newPos, newPos + component.count));
      }
      newPos += component.count;
      if (!component.added) {
        oldPos += component.count;
      }
    } else {
      component.value = diff2.join(oldString.slice(oldPos, oldPos + component.count));
      oldPos += component.count;
    }
  }
  return components;
}
var characterDiff = new Diff();
function longestCommonPrefix(str1, str2) {
  var i;
  for (i = 0; i < str1.length && i < str2.length; i++) {
    if (str1[i] != str2[i]) {
      return str1.slice(0, i);
    }
  }
  return str1.slice(0, i);
}
function longestCommonSuffix(str1, str2) {
  var i;
  if (!str1 || !str2 || str1[str1.length - 1] != str2[str2.length - 1]) {
    return "";
  }
  for (i = 0; i < str1.length && i < str2.length; i++) {
    if (str1[str1.length - (i + 1)] != str2[str2.length - (i + 1)]) {
      return str1.slice(-i);
    }
  }
  return str1.slice(-i);
}
function replacePrefix(string, oldPrefix, newPrefix) {
  if (string.slice(0, oldPrefix.length) != oldPrefix) {
    throw Error("string ".concat(JSON.stringify(string), " doesn't start with prefix ").concat(JSON.stringify(oldPrefix), "; this is a bug"));
  }
  return newPrefix + string.slice(oldPrefix.length);
}
function replaceSuffix(string, oldSuffix, newSuffix) {
  if (!oldSuffix) {
    return string + newSuffix;
  }
  if (string.slice(-oldSuffix.length) != oldSuffix) {
    throw Error("string ".concat(JSON.stringify(string), " doesn't end with suffix ").concat(JSON.stringify(oldSuffix), "; this is a bug"));
  }
  return string.slice(0, -oldSuffix.length) + newSuffix;
}
function removePrefix(string, oldPrefix) {
  return replacePrefix(string, oldPrefix, "");
}
function removeSuffix(string, oldSuffix) {
  return replaceSuffix(string, oldSuffix, "");
}
function maximumOverlap(string1, string2) {
  return string2.slice(0, overlapCount(string1, string2));
}
function overlapCount(a, b) {
  var startA = 0;
  if (a.length > b.length) {
    startA = a.length - b.length;
  }
  var endB = b.length;
  if (a.length < b.length) {
    endB = a.length;
  }
  var map = Array(endB);
  var k = 0;
  map[0] = 0;
  for (var j = 1; j < endB; j++) {
    if (b[j] == b[k]) {
      map[j] = map[k];
    } else {
      map[j] = k;
    }
    while (k > 0 && b[j] != b[k]) {
      k = map[k];
    }
    if (b[j] == b[k]) {
      k++;
    }
  }
  k = 0;
  for (var i = startA; i < a.length; i++) {
    while (k > 0 && a[i] != b[k]) {
      k = map[k];
    }
    if (a[i] == b[k]) {
      k++;
    }
  }
  return k;
}
var extendedWordChars = "a-zA-Z0-9_\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}";
var tokenizeIncludingWhitespace = new RegExp("[".concat(extendedWordChars, "]+|\\s+|[^").concat(extendedWordChars, "]"), "ug");
var wordDiff = new Diff();
wordDiff.equals = function(left, right, options) {
  if (options.ignoreCase) {
    left = left.toLowerCase();
    right = right.toLowerCase();
  }
  return left.trim() === right.trim();
};
wordDiff.tokenize = function(value) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var parts;
  if (options.intlSegmenter) {
    if (options.intlSegmenter.resolvedOptions().granularity != "word") {
      throw new Error('The segmenter passed must have a granularity of "word"');
    }
    parts = Array.from(options.intlSegmenter.segment(value), function(segment) {
      return segment.segment;
    });
  } else {
    parts = value.match(tokenizeIncludingWhitespace) || [];
  }
  var tokens = [];
  var prevPart = null;
  parts.forEach(function(part) {
    if (/\s/.test(part)) {
      if (prevPart == null) {
        tokens.push(part);
      } else {
        tokens.push(tokens.pop() + part);
      }
    } else if (/\s/.test(prevPart)) {
      if (tokens[tokens.length - 1] == prevPart) {
        tokens.push(tokens.pop() + part);
      } else {
        tokens.push(prevPart + part);
      }
    } else {
      tokens.push(part);
    }
    prevPart = part;
  });
  return tokens;
};
wordDiff.join = function(tokens) {
  return tokens.map(function(token, i) {
    if (i == 0) {
      return token;
    } else {
      return token.replace(/^\s+/, "");
    }
  }).join("");
};
wordDiff.postProcess = function(changes, options) {
  if (!changes || options.oneChangePerToken) {
    return changes;
  }
  var lastKeep = null;
  var insertion = null;
  var deletion = null;
  changes.forEach(function(change) {
    if (change.added) {
      insertion = change;
    } else if (change.removed) {
      deletion = change;
    } else {
      if (insertion || deletion) {
        dedupeWhitespaceInChangeObjects(lastKeep, deletion, insertion, change);
      }
      lastKeep = change;
      insertion = null;
      deletion = null;
    }
  });
  if (insertion || deletion) {
    dedupeWhitespaceInChangeObjects(lastKeep, deletion, insertion, null);
  }
  return changes;
};
function dedupeWhitespaceInChangeObjects(startKeep, deletion, insertion, endKeep) {
  if (deletion && insertion) {
    var oldWsPrefix = deletion.value.match(/^\s*/)[0];
    var oldWsSuffix = deletion.value.match(/\s*$/)[0];
    var newWsPrefix = insertion.value.match(/^\s*/)[0];
    var newWsSuffix = insertion.value.match(/\s*$/)[0];
    if (startKeep) {
      var commonWsPrefix = longestCommonPrefix(oldWsPrefix, newWsPrefix);
      startKeep.value = replaceSuffix(startKeep.value, newWsPrefix, commonWsPrefix);
      deletion.value = removePrefix(deletion.value, commonWsPrefix);
      insertion.value = removePrefix(insertion.value, commonWsPrefix);
    }
    if (endKeep) {
      var commonWsSuffix = longestCommonSuffix(oldWsSuffix, newWsSuffix);
      endKeep.value = replacePrefix(endKeep.value, newWsSuffix, commonWsSuffix);
      deletion.value = removeSuffix(deletion.value, commonWsSuffix);
      insertion.value = removeSuffix(insertion.value, commonWsSuffix);
    }
  } else if (insertion) {
    if (startKeep) {
      insertion.value = insertion.value.replace(/^\s*/, "");
    }
    if (endKeep) {
      endKeep.value = endKeep.value.replace(/^\s*/, "");
    }
  } else if (startKeep && endKeep) {
    var newWsFull = endKeep.value.match(/^\s*/)[0], delWsStart = deletion.value.match(/^\s*/)[0], delWsEnd = deletion.value.match(/\s*$/)[0];
    var newWsStart = longestCommonPrefix(newWsFull, delWsStart);
    deletion.value = removePrefix(deletion.value, newWsStart);
    var newWsEnd = longestCommonSuffix(removePrefix(newWsFull, newWsStart), delWsEnd);
    deletion.value = removeSuffix(deletion.value, newWsEnd);
    endKeep.value = replacePrefix(endKeep.value, newWsFull, newWsEnd);
    startKeep.value = replaceSuffix(startKeep.value, newWsFull, newWsFull.slice(0, newWsFull.length - newWsEnd.length));
  } else if (endKeep) {
    var endKeepWsPrefix = endKeep.value.match(/^\s*/)[0];
    var deletionWsSuffix = deletion.value.match(/\s*$/)[0];
    var overlap = maximumOverlap(deletionWsSuffix, endKeepWsPrefix);
    deletion.value = removeSuffix(deletion.value, overlap);
  } else if (startKeep) {
    var startKeepWsSuffix = startKeep.value.match(/\s*$/)[0];
    var deletionWsPrefix = deletion.value.match(/^\s*/)[0];
    var _overlap = maximumOverlap(startKeepWsSuffix, deletionWsPrefix);
    deletion.value = removePrefix(deletion.value, _overlap);
  }
}
var wordWithSpaceDiff = new Diff();
wordWithSpaceDiff.tokenize = function(value) {
  var regex = new RegExp("(\\r?\\n)|[".concat(extendedWordChars, "]+|[^\\S\\n\\r]+|[^").concat(extendedWordChars, "]"), "ug");
  return value.match(regex) || [];
};
function diffWordsWithSpace(oldStr, newStr, options) {
  return wordWithSpaceDiff.diff(oldStr, newStr, options);
}
var lineDiff = new Diff();
lineDiff.tokenize = function(value, options) {
  if (options.stripTrailingCr) {
    value = value.replace(/\r\n/g, "\n");
  }
  var retLines = [], linesAndNewlines = value.split(/(\n|\r\n)/);
  if (!linesAndNewlines[linesAndNewlines.length - 1]) {
    linesAndNewlines.pop();
  }
  for (var i = 0; i < linesAndNewlines.length; i++) {
    var line = linesAndNewlines[i];
    if (i % 2 && !options.newlineIsToken) {
      retLines[retLines.length - 1] += line;
    } else {
      retLines.push(line);
    }
  }
  return retLines;
};
lineDiff.equals = function(left, right, options) {
  if (options.ignoreWhitespace) {
    if (!options.newlineIsToken || !left.includes("\n")) {
      left = left.trim();
    }
    if (!options.newlineIsToken || !right.includes("\n")) {
      right = right.trim();
    }
  } else if (options.ignoreNewlineAtEof && !options.newlineIsToken) {
    if (left.endsWith("\n")) {
      left = left.slice(0, -1);
    }
    if (right.endsWith("\n")) {
      right = right.slice(0, -1);
    }
  }
  return Diff.prototype.equals.call(this, left, right, options);
};
var sentenceDiff = new Diff();
sentenceDiff.tokenize = function(value) {
  return value.split(/(\S.+?[.!?])(?=\s+|$)/);
};
var cssDiff = new Diff();
cssDiff.tokenize = function(value) {
  return value.split(/([{}:;,]|\s+)/);
};
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
var jsonDiff = new Diff();
jsonDiff.useLongestToken = true;
jsonDiff.tokenize = lineDiff.tokenize;
jsonDiff.castInput = function(value, options) {
  var undefinedReplacement = options.undefinedReplacement, _options$stringifyRep = options.stringifyReplacer, stringifyReplacer = _options$stringifyRep === void 0 ? function(k, v) {
    return typeof v === "undefined" ? undefinedReplacement : v;
  } : _options$stringifyRep;
  return typeof value === "string" ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, "  ");
};
jsonDiff.equals = function(left, right, options) {
  return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, "$1"), right.replace(/,([\r\n])/g, "$1"), options);
};
function canonicalize(obj, stack, replacementStack, replacer, key) {
  stack = stack || [];
  replacementStack = replacementStack || [];
  if (replacer) {
    obj = replacer(key, obj);
  }
  var i;
  for (i = 0; i < stack.length; i += 1) {
    if (stack[i] === obj) {
      return replacementStack[i];
    }
  }
  var canonicalizedObj;
  if ("[object Array]" === Object.prototype.toString.call(obj)) {
    stack.push(obj);
    canonicalizedObj = new Array(obj.length);
    replacementStack.push(canonicalizedObj);
    for (i = 0; i < obj.length; i += 1) {
      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
    }
    stack.pop();
    replacementStack.pop();
    return canonicalizedObj;
  }
  if (obj && obj.toJSON) {
    obj = obj.toJSON();
  }
  if (_typeof(obj) === "object" && obj !== null) {
    stack.push(obj);
    canonicalizedObj = {};
    replacementStack.push(canonicalizedObj);
    var sortedKeys = [], _key;
    for (_key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, _key)) {
        sortedKeys.push(_key);
      }
    }
    sortedKeys.sort();
    for (i = 0; i < sortedKeys.length; i += 1) {
      _key = sortedKeys[i];
      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
    }
    stack.pop();
    replacementStack.pop();
  } else {
    canonicalizedObj = obj;
  }
  return canonicalizedObj;
}
var arrayDiff = new Diff();
arrayDiff.tokenize = function(value) {
  return value.slice();
};
arrayDiff.join = arrayDiff.removeEmpty = function(value) {
  return value;
};

// src/diffDecorations.ts
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var setDiffDecorations = import_state.StateEffect.define();
var diffDecorationsField = import_state.StateField.define({
  create() {
    return import_view.Decoration.none;
  },
  update(deco, tr) {
    for (const e of tr.effects) {
      if (e.is(setDiffDecorations)) {
        return e.value;
      }
    }
    return deco.map(tr.changes);
  },
  provide: (f) => import_view.EditorView.decorations.from(f)
});

// src/diffHighlighter.ts
function highlightDiff(origEditor, compEditor, originalText, newText, accentVar = "var(--color-blue)") {
  const diff2 = diffWordsWithSpace(originalText, newText);
  let origPos = 0;
  let compPos = 0;
  const origBuilder = new import_state2.RangeSetBuilder();
  const compBuilder = new import_state2.RangeSetBuilder();
  diff2.forEach((part) => {
    const partLength = part.value.length;
    if (part.removed) {
      origBuilder.add(
        origPos,
        origPos + partLength,
        import_view2.Decoration.mark({
          attributes: {
            style: `background-color: color-mix(in srgb, ${accentVar} 60%, transparent);border-radius: 4px;`
          }
        })
      );
      origPos += partLength;
    } else if (part.added) {
      compBuilder.add(
        compPos,
        compPos + partLength,
        import_view2.Decoration.mark({
          attributes: {
            style: `background-color: color-mix(in srgb, ${accentVar} 60%, transparent);border-radius: 4px;`
          }
        })
      );
      compPos += partLength;
    } else {
      origPos += partLength;
      compPos += partLength;
    }
  });
  const origDecoSet = origBuilder.finish();
  const compDecoSet = compBuilder.finish();
  const origView = origEditor.cm;
  const compView = compEditor.cm;
  if (!origView || !compView) {
    throw new Error("Failed to get CodeMirror EditorView.");
  }
  origView.dispatch({
    effects: import_state2.StateEffect.appendConfig.of(diffDecorationsField)
  });
  compView.dispatch({
    effects: import_state2.StateEffect.appendConfig.of(diffDecorationsField)
  });
  origView.dispatch({ effects: setDiffDecorations.of(origDecoSet) });
  compView.dispatch({ effects: setDiffDecorations.of(compDecoSet) });
}

// src/diffExecutor.ts
var DiffExecutor = class {
  constructor(app) {
    this.app = app;
  }
  /**
   * 指定された2つのファイルの内容を読み込み、必要に応じて既存のエディタを利用して
   * diffハイライトを実行します。
   */
  async executeDiff(origFile, compFile) {
    const origContent = await this.app.vault.read(origFile);
    const compContent = await this.app.vault.read(compFile);
    let compEditor = this.getEditorFromFile(compFile);
    if (!compEditor) {
      this.app.workspace.splitActiveLeaf("vertical");
      await this.app.workspace.openLinkText(compFile.basename, "", true);
    }
    setTimeout(() => {
      const origEditor = this.getEditorFromFile(origFile);
      const compEditorNow = this.getEditorFromFile(compFile);
      if (!origEditor || !compEditorNow) {
        new import_obsidian.Notice("Editor not found.");
        return;
      }
      highlightDiff(origEditor, compEditorNow, origContent, compContent);
    }, 500);
  }
  /**
   * 指定ファイルに対応するエディタを取得します。
   */
  getEditorFromFile(file) {
    const leaves = this.app.workspace.getLeavesOfType("markdown");
    for (const leaf of leaves) {
      const view = leaf.view;
      if (view.file && view.file.path === file.path) {
        return view.editor;
      }
    }
    return null;
  }
};

// src/filePickerModal.ts
var import_obsidian2 = require("obsidian");
var FilePickerModal = class extends import_obsidian2.FuzzySuggestModal {
  constructor(app, onChoose) {
    super(app);
    this.onChoose = onChoose;
    this.setPlaceholder("Select a file to compare with");
  }
  getItems() {
    return this.app.vault.getFiles();
  }
  getItemText(item) {
    return item.basename;
  }
  onChooseItem(item, evt) {
    this.onChoose(item);
  }
};

// src/fileSelector.ts
var import_obsidian3 = require("obsidian");
var FileSelector = class {
  constructor(app, onFileSelected) {
    this.app = app;
    this.onFileSelected = onFileSelected;
    this.cleanupFunc = null;
  }
  /**
   * ファイル選択モードを開始します。対象のMarkdown Leafに対してイベントを登録します。
   */
  startSelectionMode() {
    new import_obsidian3.Notice(
      "\u30D5\u30A1\u30A4\u30EB\u9078\u629E\u30E2\u30FC\u30C9\u306B\u306A\u308A\u307E\u3057\u305F\u3002\u6BD4\u8F03\u5BFE\u8C61\u306E\u30D5\u30A1\u30A4\u30EB\u304C\u3042\u308BLeaf\u3092\u30AF\u30EA\u30C3\u30AF\u3057\u3066\u304F\u3060\u3055\u3044\u3002"
    );
    const leaves = this.app.workspace.getLeavesOfType("markdown");
    const listeners = [];
    for (const leaf of leaves) {
      const container = leaf.view.containerEl;
      const mouseEnter = (_ev) => {
        container.classList.add("file-selection-hover");
      };
      const mouseLeave = (_ev) => {
        container.classList.remove("file-selection-hover");
      };
      const clickHandler = (ev) => {
        ev.preventDefault();
        ev.stopPropagation();
        const view = leaf.view;
        if (view && view.file) {
          this.onFileSelected(view.file);
          this.cleanup();
        } else {
          new import_obsidian3.Notice(
            "\u9078\u629E\u3057\u305FLeaf\u306B\u30D5\u30A1\u30A4\u30EB\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3067\u3057\u305F\u3002"
          );
        }
      };
      container.addEventListener("mouseenter", mouseEnter);
      container.addEventListener("mouseleave", mouseLeave);
      container.addEventListener("click", clickHandler);
      listeners.push({
        leaf,
        mouseEnter,
        mouseLeave,
        click: clickHandler
      });
    }
    this.cleanupFunc = () => {
      for (const { leaf, mouseEnter, mouseLeave, click } of listeners) {
        leaf.view.containerEl.removeEventListener(
          "mouseenter",
          mouseEnter
        );
        leaf.view.containerEl.removeEventListener(
          "mouseleave",
          mouseLeave
        );
        leaf.view.containerEl.removeEventListener(
          "click",
          click
        );
        leaf.view.containerEl.classList.remove(
          "file-selection-hover"
        );
      }
    };
  }
  /**
   * 登録されたすべてのイベントリスナーを解除します。
   */
  cleanup() {
    if (this.cleanupFunc) {
      this.cleanupFunc();
      this.cleanupFunc = null;
    }
  }
};

// src/main.ts
var DiffHighlighterPlugin = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.lastActiveFile = null;
    this.lastSelectedFile = null;
  }
  async onload() {
    console.log("Diff Highlighter Plugin loaded");
    this.diffExecutor = new DiffExecutor(this.app);
    this.addCommand({
      id: "compare-with-file",
      name: "\u30D5\u30A1\u30A4\u30EB\u6BD4\u8F03\uFF08\u691C\u7D22\u304B\u3089\u9078\u629E\uFF09",
      callback: () => this.compareFiles()
    });
    this.addCommand({
      id: "select-comparison-file",
      name: "\u30D5\u30A1\u30A4\u30EB\u6BD4\u8F03\uFF08UI\u4E0A\u3067\u9078\u629E\uFF09",
      callback: () => this.selectComparisonFile()
    });
    this.addCommand({
      id: "update-diff",
      name: "\u5DEE\u5206\u3092\u66F4\u65B0",
      callback: () => this.updateDiff()
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        menu.addItem((item) => {
          item.setTitle("\u6BD4\u8F03\u30D5\u30A1\u30A4\u30EB\u3092\u9078\u629E").setIcon("swap-vertical").onClick(async () => {
            this.lastActiveFile = file;
            const selector = new FileSelector(
              this.app,
              (selectedFile) => {
                if (!selectedFile || !selectedFile.path) {
                  new import_obsidian4.Notice(
                    "\u7121\u52B9\u306ALeaf\u304C\u9078\u629E\u3055\u308C\u307E\u3057\u305F\u3002"
                  );
                  return;
                }
                if (this.lastActiveFile && selectedFile.path === this.lastActiveFile.path) {
                  new import_obsidian4.Notice(
                    "\u81EA\u5206\u81EA\u8EAB\u306F\u9078\u629E\u3067\u304D\u307E\u305B\u3093\u3002"
                  );
                  return;
                }
                this.lastSelectedFile = selectedFile;
                this.diffExecutor.executeDiff(
                  this.lastActiveFile,
                  selectedFile
                );
              }
            );
            selector.startSelectionMode();
          });
        });
      })
    );
  }
  /**
   * コマンドパレットから実行する、ファイル選択モードを起動する処理。
   * アクティブなファイルを比較元として設定し、FileSelector で比較先を選択します。
   */
  selectComparisonFile() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian4.Notice("No active file.");
      return;
    }
    this.lastActiveFile = activeFile;
    const selector = new FileSelector(this.app, (selectedFile) => {
      if (!selectedFile || !selectedFile.path) {
        new import_obsidian4.Notice("\u7121\u52B9\u306ALeaf\u304C\u9078\u629E\u3055\u308C\u307E\u3057\u305F\u3002");
        return;
      }
      if (this.lastActiveFile && selectedFile.path === this.lastActiveFile.path) {
        new import_obsidian4.Notice("\u81EA\u5206\u81EA\u8EAB\u306F\u9078\u629E\u3067\u304D\u307E\u305B\u3093\u3002");
        return;
      }
      this.lastSelectedFile = selectedFile;
      this.diffExecutor.executeDiff(this.lastActiveFile, selectedFile);
    });
    selector.startSelectionMode();
  }
  /**
   * FilePickerModal を利用した従来の比較処理
   */
  async compareFiles() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian4.Notice("No active file.");
      return;
    }
    new FilePickerModal(this.app, async (selectedFile) => {
      if (!selectedFile) {
        new import_obsidian4.Notice("No comparison file was selected.");
        return;
      }
      if (activeFile.path === selectedFile.path) {
        new import_obsidian4.Notice("\u81EA\u5206\u81EA\u8EAB\u306F\u9078\u629E\u3067\u304D\u307E\u305B\u3093\u3002");
        return;
      }
      this.lastActiveFile = activeFile;
      this.lastSelectedFile = selectedFile;
      await this.diffExecutor.executeDiff(activeFile, selectedFile);
    }).open();
  }
  /**
   * すでに比較された2つのファイルについて、diff の更新を実行します。
   */
  updateDiff() {
    if (!this.lastActiveFile || !this.lastSelectedFile) {
      new import_obsidian4.Notice("No comparison has been performed yet.");
      return;
    }
    const origEditor = this.diffExecutor.getEditorFromFile(
      this.lastActiveFile
    );
    const compEditor = this.diffExecutor.getEditorFromFile(
      this.lastSelectedFile
    );
    if (!origEditor || !compEditor) {
      new import_obsidian4.Notice("Editor not found.");
      return;
    }
    const origContent = origEditor.getValue();
    const compContent = compEditor.getValue();
    highlightDiff(origEditor, compEditor, origContent, compContent);
    new import_obsidian4.Notice("Diff has been updated.");
  }
};
//# sourceMappingURL=data:application/json;base64,
